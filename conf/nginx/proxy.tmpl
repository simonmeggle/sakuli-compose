
error_log /dev/stdout debug;	
server {
   listen 81;


# RANGE CONTAINER ----------------------------------------------
{{ range $host, $containers := groupBy $ "Env.NO_VNC_PORT" }}
	{{ range $container_index, $container := $containers }}
# CONTAINER {{ $container.Name }}:
		{{ $network := index $container.Networks 0 }}
# network: {{$network}}
		{{ if $container.Env.NO_VNC_PORT }}
# ------ RANGE container {{ $container.Name }} ADDRESSES -------------
			{{ range $address_index, $address := $container.Addresses }}
#   - address {{$address_index}}: {{ $address }}
#   - address {{$address_index}}.Port: {{ $address.Port }}
#   - address {{$address_index}}.HostPort: {{ $address.HostPort }}
#   - container.Env.NO_VNC_PORT: {{ $container.Env.NO_VNC_PORT }}
				{{ if eq $address.Port $container.Env.NO_VNC_PORT }}
#     => {{ $address.Port }} matches {{ $container.Env.NO_VNC_PORT }}

   location /{{ $container.Name }} {
        proxy_pass http://{{ $network.IP }}:{{ $address.Port }};
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # WebSocket support (nginx 1.4)
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";

        # Path rewriting
        rewrite /{{ $container.Name }}/(.*) /$1 break;
        proxy_redirect off;

				{{ else }}
# 	  => NO MATCH!!! ({{ $address.Port }} != {{ $container.Env.NO_VNC_PORT }})
				{{ end }}
			{{ end }}
		{{ end }}
    }
	{{ end }}
{{ end }}        

}


